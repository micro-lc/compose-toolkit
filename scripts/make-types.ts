/* eslint-disable no-sync */
/*!

  Copyright 2022 Mia srl

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

*/

import fs from 'fs'
import path from 'path'

import type { Options } from 'json-schema-to-typescript'
import { compileFromFile } from 'json-schema-to-typescript'

import banner from './banner'

const bannerComment = [
  '/* eslint-disable */',
  '/**',
  ' * This file was automatically generated by json-schema-to-typescript.',
  ' * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,',
  ' * and run `yarn make-types` to regenerate this file.',
  ' */',
]

const main = async () => {
  const schemaDirPath = path.resolve(__dirname, '../schemas')
  const outputDir = path.resolve(__dirname, '../dist/types')

  const inputFilePath = path.resolve(schemaDirPath, 'manifest.schema.json')
  const outputFilePath = path.resolve(outputDir, 'manifest.d.ts')

  try {
    const finalBanner = ['/*!', ...banner, '*/', '', ...bannerComment].join('\n')
    const compileProps: Partial<Options> = {
      $refOptions: {
        resolve: {
          http: {
            read({ url }) {
              const fileNameMatch = url.match(/micro-lc\/compose-toolkit\/main\/schemas\/(.+)(#\/.*)?$/)

              if (fileNameMatch?.[1] !== undefined && fs.existsSync(path.resolve(schemaDirPath, fileNameMatch[1]))) {
                return fs.readFileSync(path.resolve(schemaDirPath, fileNameMatch[1]))
              }

              throw new TypeError(`Cannot find locally a file for ${url} $ref`)
            },
          },
        },
      },
      bannerComment: finalBanner,
      style: { semi: false },
      unreachableDefinitions: true,
    }

    const compiledTypes = await compileFromFile(inputFilePath, compileProps)

    await fs.promises.mkdir(outputDir, { recursive: true })
    await fs.promises.writeFile(outputFilePath, compiledTypes, { flag: 'w' })

    const indextds = [
      finalBanner,
      'export type * from \'./manifest\'',
      'export type * from \'./component\'',
    ].join('\n')
    await fs.promises.writeFile(path.resolve(outputDir, 'index.d.ts'), indextds, { flag: 'w' })

    console.log('\x1b[32m%s\x1b[0m', '✔ Schema compiled successfully')
  } catch (err) {
    console.log('\x1b[31m%s\x1b[0m', '✖ Failed compiling schema')
    console.error(err)
  }
}

main().catch(err => console.error(err))
